USE master;
GO

-- 21126090 - 21126054 - 21126072 - 21126088

-- MỤC LỤC

-- 1. TẠO CƠ SỞ DỮ LIỆU
-- 2. PHÂN QUYỀN
-- 3. TRIGGER
-- 4. NHẬP LIỆU


-- 1. TẠO CƠ SỞ DỮ LIỆU----------------------------------------------------------------------------------------------------
-- USE MASTER 
-- GO
-- DROP DATABASE PKNHAKHOA
IF NOT EXISTS (SELECT name FROM master.dbo.sysdatabases WHERE name = 'PKNHAKHOA')
BEGIN
    CREATE DATABASE PKNHAKHOA;
END
GO

USE PKNHAKHOA;
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'KHACHHANG')
BEGIN
    CREATE TABLE KHACHHANG 
    (
        SODT VARCHAR(10) PRIMARY KEY,
        HOTEN NVARCHAR(50),
        PHAI NVARCHAR(5) CHECK(PHAI IN (N'Nam', N'Nữ')),
        NGAYSINH DATE,
        DIACHI NVARCHAR(250),
        MATKHAU VARCHAR(20),
        _DAKHOA BIT DEFAULT 0
    );
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NHASI')
BEGIN
	CREATE TABLE NHASI 
	(
		MANS VARCHAR(10) PRIMARY KEY,
		HOTEN NVARCHAR(50),
		PHAI NVARCHAR(5) CHECK(PHAI IN (N'Nam', N'Nữ')),
		GIOITHIEU NVARCHAR(500),
		MATKHAU VARCHAR(20),
		_DAKHOA BIT DEFAULT 0
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NHANVIEN')
BEGIN
	CREATE TABLE NHANVIEN 
	(
		MANV VARCHAR(10) PRIMARY KEY,
		HOTEN NVARCHAR(50),
		PHAI NVARCHAR(5) CHECK(PHAI IN (N'Nam', N'Nữ')),
		VITRICV NVARCHAR(50),
		MATKHAU VARCHAR(20),
		_DAKHOA BIT DEFAULT 0
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QTV')
BEGIN
	CREATE TABLE QTV 
	(
		MAQTV VARCHAR(10) PRIMARY KEY,
		HOTEN NVARCHAR(50),
		PHAI NVARCHAR(5) CHECK(PHAI IN (N'Nam', N'Nữ')),
		MATKHAU VARCHAR(20),
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'LOAITHUOC')
BEGIN
	CREATE TABLE LOAITHUOC
	(
		MATHUOC VARCHAR(10) PRIMARY KEY,
		TENTHUOC NVARCHAR(50),
		DONVITINH NVARCHAR(20),
		CHIDINH NVARCHAR(200),
		SLTON INT CHECK (SLTON >= 0),
		SLNHAP INT CHECK (SLNHAP > 0),
		SLDAHUY INT CHECK (SLDAHUY >= 0),
		NGAYHETHAN DATE,
		DONGIA FLOAT CHECK (DONGIA > 0)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'LOAIDICHVU')
BEGIN
	CREATE TABLE LOAIDICHVU
	(
		MADV VARCHAR(10) PRIMARY KEY,
		TENDV NVARCHAR(50),
		MOTA NVARCHAR(500),
		DONGIA FLOAT CHECK (DONGIA > 0)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CA')
BEGIN
	CREATE TABLE CA
	(
		MACA VARCHAR(10) PRIMARY KEY,
		GIOBATDAU TIME,
		GIOKETTHUC TIME
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CHITIETDV')
BEGIN
	CREATE TABLE CHITIETDV
	(
		MADV VARCHAR(10),
		SOTT INT,
		SODT VARCHAR(10),
		SOLUONG INT CHECK(SOLUONG > 0)
		PRIMARY KEY(SODT, SOTT, MADV)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CHITIETTHUOC')
BEGIN
	CREATE TABLE CHITIETTHUOC
	(
		MATHUOC VARCHAR(10),
		SOTT INT,
		SODT VARCHAR(10),
		SOLUONG INT CHECK (SOLUONG > 0),
		THOIDIEMDUNG NVARCHAR(200)
		PRIMARY KEY(SODT, SOTT, MATHUOC)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'LICHRANH')
BEGIN
	CREATE TABLE LICHRANH
	(
		MANS VARCHAR(10),
		SOTT INT,
		MACA VARCHAR(10),
		NGAY DATE,
		PRIMARY KEY(MANS, SOTT)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'LICHHEN')
BEGIN
	CREATE TABLE LICHHEN
	(
		MANS VARCHAR(10),
		SOTT INT,
		LYDOKHAM NVARCHAR(200),
		SODT VARCHAR(10)
		PRIMARY KEY(MANS, SOTT, SODT)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'HOSOBENH')
BEGIN
	CREATE TABLE HOSOBENH
	(
		SODT VARCHAR(10),
		SOTT INT,
		NGAYKHAM DATE,
		DANDO NVARCHAR(500),
		MANS VARCHAR(10),
		_DAXUATHOADON BIT DEFAULT 0
		PRIMARY KEY(SODT, SOTT)
	);
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'HOADON')
BEGIN
	CREATE TABLE HOADON
	(
		SODT VARCHAR(10),
		SOTT INT,
		NGAYXUAT DATE,
		TONGCHIPHI FLOAT CHECK (TONGCHIPHI > 0),
		_DATHANHTOAN BIT DEFAULT 0,
		MANV VARCHAR(10)
		PRIMARY KEY(SODT, SOTT)
	);
END

--PK1 LICHRANH(MANS) --> NHASI(MANS)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_LR_NS')
BEGIN
    ALTER TABLE LICHRANH
    ADD CONSTRAINT FK_LR_NS
    FOREIGN KEY(MANS)
    REFERENCES NHASI(MANS);
END

--PK2 LICHRANH(MACA) --> CA(MACA)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_LR_CA')
BEGIN
    ALTER TABLE LICHRANH
    ADD CONSTRAINT FK_LR_CA
    FOREIGN KEY(MACA)
    REFERENCES CA(MACA);
END

--PK3 LICHHEN(MANS, SOTT) --> LICHRANH(MANS, SOTT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_LH_LR')
BEGIN
    ALTER TABLE LICHHEN
    ADD CONSTRAINT FK_LH_LR
    FOREIGN KEY(MANS, SOTT)
    REFERENCES LICHRANH(MANS, SOTT);
END

--PK4 LICHHEN(SODT) --> KHACHHANG(SODT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_LH_KH')
BEGIN
	ALTER TABLE LICHHEN
	ADD CONSTRAINT FK_LH_KH
	FOREIGN KEY(SODT)
	REFERENCES KHACHHANG(SODT);
END

-- PK5 HOSOBENH(MANS) --> NHASI(MANS)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_HSB_NS')
BEGIN
    ALTER TABLE HOSOBENH
    ADD CONSTRAINT FK_HSB_NS
    FOREIGN KEY(MANS)
    REFERENCES NHASI(MANS);
END

-- PK6 HOSOBENH(SODT) --> KHACHHANG(SODT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_HSB_KH')
BEGIN
    ALTER TABLE HOSOBENH
    ADD CONSTRAINT FK_HSB_KH
    FOREIGN KEY(SODT)
    REFERENCES KHACHHANG(SODT);
END

-- PK7 HOADON(SODT, SOTT) --> HOSOBENH(SODT, SOTT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_HD_HSB')
BEGIN
    ALTER TABLE HOADON
    ADD CONSTRAINT FK_HD_HSB
    FOREIGN KEY(SODT, SOTT)
    REFERENCES HOSOBENH(SODT, SOTT);
END

-- PK8 HOADON(MANV) --> NHANVIEN(MANV)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_HD_NV')
BEGIN
    ALTER TABLE HOADON
    ADD CONSTRAINT FK_HD_NV
    FOREIGN KEY(MANV)
    REFERENCES NHANVIEN(MANV);
END

-- PK9 CHITIETDV(MADV) --> LOAIDICHVU(MADV)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_CTDV_LDV')
BEGIN
    ALTER TABLE CHITIETDV
    ADD CONSTRAINT FK_CTDV_LDV
    FOREIGN KEY(MADV)
    REFERENCES LOAIDICHVU(MADV);
END

-- PK10 CHITIETDV(SODT, SOTT) --> HOSOBENH(SODT, SOTT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_CTDV_HSB')
BEGIN
    ALTER TABLE CHITIETDV
    ADD CONSTRAINT FK_CTDV_HSB
    FOREIGN KEY(SODT, SOTT)
    REFERENCES HOSOBENH(SODT, SOTT);
END

-- PK11 CHITIETTHUOC(MATHUOC) --> LOAITHUOC(MATHUOC)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_CTT_LT')
BEGIN
    ALTER TABLE CHITIETTHUOC
    ADD CONSTRAINT FK_CTT_LT
    FOREIGN KEY(MATHUOC)
    REFERENCES LOAITHUOC(MATHUOC);
END

-- PK12 CHITIETTHUOC(SODT, SOTT) --> HOSOBENH(SODT, SOTT)
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_CTT_HSB')
BEGIN
    ALTER TABLE CHITIETTHUOC
    ADD CONSTRAINT FK_CTT_HSB
    FOREIGN KEY(SODT, SOTT)
    REFERENCES HOSOBENH(SODT, SOTT);
END
-----------------------------------------------------------------------------------------------------------------

-- 2. PHÂN QUYỀN-------------------------------------------------------------------------------------------------
USE master;
GO

IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'loginKH')
BEGIN
    CREATE LOGIN loginKH WITH PASSWORD = 'password123@';
END

IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'loginNS')
BEGIN
    CREATE LOGIN loginNS WITH PASSWORD = 'password123@';
END

IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'loginNV')
BEGIN
    CREATE LOGIN loginNV WITH PASSWORD = 'password123@';
END

IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'loginQTV')
BEGIN
    CREATE LOGIN loginQTV WITH PASSWORD = 'password123@';
END

IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'loginServer')
BEGIN
    CREATE LOGIN loginServer WITH PASSWORD = 'password123@';
END


USE PKNHAKHOA;
GO


IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'userKH')
BEGIN
    CREATE USER userKH FOR LOGIN loginKH;
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'userNS')
BEGIN
    CREATE USER userNS FOR LOGIN loginNS;
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'userNV')
BEGIN
    CREATE USER userNV FOR LOGIN loginNV;
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'userQTV')
BEGIN
    CREATE USER userQTV FOR LOGIN loginQTV;
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'userServer')
BEGIN
    CREATE USER userServer FOR LOGIN loginServer;
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'QTV')
BEGIN
    EXEC SP_ADDROLE 'QTV';
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'KHACHHANG')
BEGIN
    EXEC SP_ADDROLE 'KHACHHANG';
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'NHANVIEN')
BEGIN
    EXEC SP_ADDROLE 'NHANVIEN';
END

IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'NHASI')
BEGIN
    EXEC SP_ADDROLE 'NHASI';
END

EXEC sp_addrolemember 'QTV', 'userQTV'
EXEC sp_addrolemember 'KHACHHANG', 'userKH'
EXEC sp_addrolemember 'NHANVIEN', 'userNV'
EXEC sp_addrolemember 'NHASI', 'userNS'
EXEC sp_addrolemember db_datareader, 'userServer'

USE PKNHAKHOA
GO
--I/ Phân quyền cho role QTV
--1. Quyền quản lý tài khoản KH
GRANT SELECT (SODT, HOTEN, PHAI, NGAYSINH, DIACHI, _DAKHOA), UPDATE (_DAKHOA)
ON KHACHHANG
TO QTV

--2. Quyền quản lý tài khoản NV
GRANT SELECT (MANV, HOTEN, PHAI, VITRICV, _DAKHOA), INSERT, UPDATE (_DAKHOA)
ON NHANVIEN
TO QTV

--3. Quyền quản lý tài khoản NS
GRANT SELECT (MANS, HOTEN, PHAI, GIOITHIEU, _DAKHOA), INSERT, UPDATE (_DAKHOA)
ON NHASI
TO QTV

--4. Quyền quản lý tài khoản QTV
GRANT SELECT, INSERT, UPDATE(HOTEN, PHAI, MATKHAU)
ON QTV
TO QTV

--5. Quyền quản lý dịch vụ 
GRANT SELECT, INSERT, DELETE, UPDATE(TENDV, MOTA, DONGIA)
ON LOAIDICHVU
TO QTV

--6. Quyền quản lý các loại thuốc
GRANT SELECT, INSERT, DELETE, UPDATE (TENTHUOC, DONVITINH, CHIDINH, SLTON, SLNHAP, SLDAHUY, NGAYHETHAN, DONGIA)
ON LOAITHUOC
TO QTV

--7. Quyền quản lý các ca
GRANT SELECT, INSERT, DELETE, UPDATE(GIOBATDAU, GIOKETTHUC)
ON CA
TO QTV

--II/ Phân quyền cho KHACHHANG 
--1. Mọi quyền trên tài khoản KH trừ xóa tài khoản
GRANT SELECT, INSERT, UPDATE(HOTEN, PHAI, NGAYSINH, DIACHI, MATKHAU)
ON KHACHHANG
TO KHACHHANG

--2. Quyền xem,thêm, xóa lịch hẹn
GRANT SELECT, DELETE, INSERT
ON LICHHEN
TO KHACHHANG

--3. Quyền xem trên lịch rảnh của nha sĩ
GRANT SELECT
ON LICHRANH
TO KHACHHANG

--4. Quyền xem trên CA
GRANT SELECT
ON CA
TO KHACHHANG

--5. Quyền xem thông tin nha sĩ
GRANT SELECT (MANS, HOTEN, PHAI, GIOITHIEU)
ON NHASI
TO KHACHHANG

--6. Quyền xem hồ sơ bệnh 
GRANT SELECT (SODT, SOTT, NGAYKHAM, DANDO, MANS)
ON HOSOBENH
TO KHACHHANG

--7. Quyền xem hóa đơn 
GRANT SELECT
ON HOADON
TO KHACHHANG

--8. Quyền xem tên nhân viên trong hóa đơn 
GRANT SELECT(MANV, HOTEN)
ON NHANVIEN
TO KHACHHANG

--9. Quyền xem chi tiết dịch vụ
GRANT SELECT
ON CHITIETDV
TO KHACHHANG

--10. Quyền xem loại dịch vụ
GRANT SELECT
ON LOAIDICHVU
TO KHACHHANG

--11. Quyền xem chi tiết nhân thuốc trong mỗi đơn thuốc
GRANT SELECT
ON CHITIETTHUOC
TO KHACHHANG

--12. Quyền xem tên các loại thuốc
GRANT SELECT (MATHUOC, TENTHUOC, DONVITINH, CHIDINH, DONGIA, NGAYHETHAN)
ON LOAITHUOC
TO KHACHHANG

--III/ Phân quyền cho role NHASI
--1. Quyền xem, sửa trên bảng nha sĩ.
GRANT SELECT, UPDATE (HOTEN, PHAI, GIOITHIEU, MATKHAU)
ON NHASI
TO NHASI

--2. Quyền quản lý lịch rảnh.
GRANT SELECT, INSERT, DELETE, UPDATE(MACA, NGAY)
ON LICHRANH
TO NHASI

--3. Quyền xem ca
GRANT SELECT
ON CA
TO NHASI

--4. Quyền xem lịch hẹn
GRANT SELECT
ON LICHHEN
TO NHASI

--5. Quyền xem, tạo hồ sơ bệnh án của bệnh nhân
GRANT SELECT, INSERT
ON HOSOBENH
TO NHASI

--6. Quyền xem và tạo chi tiết dịch vụ
GRANT SELECT, INSERT
ON CHITIETDV
TO NHASI

--7. Quyền xem loại dịch vụ
GRANT SELECT
ON LOAIDICHVU
TO NHASI

--8. Quyền xem và tạo chi tiết thuốc
GRANT SELECT, INSERT
ON CHITIETTHUOC
TO NHASI

--9. Quyền xem loại thuốc
GRANT SELECT
ON LOAITHUOC
TO NHASI

--10. Quyền xem thông tin khách hàng
GRANT SELECT(SODT, HOTEN, PHAI, NGAYSINH, DIACHI)
ON KHACHHANG
TO NHASI

--IV/ Phân quyền cho role NHANVIEN
--1. Quyền xem, sửa thông tin nhân viên
GRANT SELECT, UPDATE(HOTEN, PHAI)
ON NHANVIEN
TO NHANVIEN

--2. Quyền xem, tạo hóa đơn
GRANT SELECT, INSERT
ON HOADON
TO NHANVIEN

--3. Quyền xem hồ sơ bệnh án
GRANT SELECT
ON HOSOBENH
TO NHANVIEN

--4. Quyền xem trên chi tiết dịch vụ
GRANT SELECT
ON CHITIETDV
TO NHANVIEN

--5. Quyền xem trên loại dịch vụ
GRANT SELECT
ON LOAIDICHVU
TO NHANVIEN

--6. Quyền xem trên chi tiết thuốc
GRANT SELECT
ON CHITIETTHUOC
TO NHANVIEN

--7. Quyền xem các loại thuốc
GRANT SELECT
ON LOAITHUOC
TO NHANVIEN

--8. Quyền xem và tạo tài khoản khách hàng
GRANT SELECT(SODT, HOTEN, PHAI, NGAYSINH, _DAKHOA), INSERT 
ON KHACHHANG
TO NHANVIEN

--9. Quyền xem thông tin nha sĩ
GRANT SELECT(MANS, HOTEN, PHAI, GIOITHIEU, _DAKHOA) 
ON NHASI
TO NHANVIEN

--10. Quyền xem,thêm, xóa lịch hẹn
GRANT SELECT, DELETE, INSERT
ON LICHHEN
TO NHANVIEN

--11. Quyền xem trên lịch rảnh của nha sĩ
GRANT SELECT
ON LICHRANH
TO NHANVIEN

--12. Quyền xem trên CA
GRANT SELECT
ON CA
TO NHANVIEN
GO

-------------------------------------------------------------------------------------------------------
-- 3. Trigger------------------------------------------------------------------------------------------

-- Với mọi ca, giờ bắt đầu phải nhỏ hơn giờ kết thúc.
CREATE TRIGGER TRIGGER_CA_INSERT_UPDATE_1
ON CA
AFTER INSERT, UPDATE
AS
BEGIN
    IF EXISTS (SELECT *
    FROM inserted
    WHERE GIOBATDAU >= GIOKETTHUC)
    BEGIN
        RAISERROR (N'Giờ bắt đầu phải nhỏ hơn giờ kết thúc.', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END;
GO

-- Với mọi ca, giờ kết thúc - giờ bắt đầu = 2 tiếng
CREATE TRIGGER TRIGGER_CA_INSERT_UPDATE_2
ON CA
AFTER INSERT, UPDATE
AS
BEGIN
    IF EXISTS (SELECT 1
    FROM inserted
    WHERE DATEDIFF(HOUR, inserted.GIOBATDAU, inserted.GIOKETTHUC) <> 2)
    BEGIN
        RAISERROR ('Độ dài ca phải là 2 tiếng.', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END;
GO


-- Các lịch rảnh của một nha sĩ không được trùng nhau (trùng ca và trùng ngày).
CREATE TRIGGER TRIGGER_LICHRANH_INSERT_UPDATE_2
ON LICHRANH
AFTER INSERT, UPDATE
AS
BEGIN
    IF EXISTS (
        SELECT MANS, NGAY, MACA
        FROM (SELECT MANS, NGAY, MACA FROM inserted) AS I
        GROUP BY MANS, NGAY, MACA
        HAVING COUNT(*) > 1
    )
    BEGIN
        RAISERROR(N'Không thể cập nhật dòng thành một giá trị đã tồn tại.', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END;
GO

-- Mỗi ca trong ngày chỉ được tối đa 2 nha sĩ được đăng ký. 
CREATE TRIGGER TRIGGER_LICHRANH_INSERT_UPDATE_3
ON LICHRANH
AFTER INSERT, UPDATE
AS
BEGIN
    IF EXISTS (
        SELECT MACA, NGAY, COUNT(*) AS SLNS
        FROM LICHRANH
        GROUP BY MACA, NGAY
        HAVING COUNT(*) > 2
    )
    BEGIN
        RAISERROR(N'Không thể đăng ký nhiều hơn 2 Nha sĩ cho mỗi ca trong một ngày.', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END;
GO

-- Mỗi lịch rảnh, ca và ngày cần not null.
CREATE TRIGGER TRIGGER_LICHRANH_INSERT_UPDATE_4
ON LICHRANH
AFTER INSERT, UPDATE
AS
BEGIN
    
    IF EXISTS (
        SELECT 1
        FROM inserted AS i
        LEFT JOIN CA AS c ON i.MACA = c.MACA
        WHERE c.MACA IS NULL OR i.NGAY IS NULL
    )
    BEGIN
        RAISERROR(N'Mỗi lịch rảnh cần được liên kết với một thông tin ca và ngày không được NULL.', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END;
GO



-------------------------------------------------------------------------------------------
-- USE PKNHAKHOA
-- GO
-- I/ Tạo trigger cho bảng CHITIETTHUOC
-- 1. Trigger bán thuốc, cập nhật số lượng thuốc tồn kho
-- Tạo trigger nếu chưa tồn tại hoặc cập nhật nếu trigger đã tồn tại
IF EXISTS (SELECT *
FROM sys.triggers
WHERE name = 'Trigger_Insert_CTT')
    DROP TRIGGER Trigger_Insert_CTT
GO

CREATE TRIGGER Trigger_Insert_CTT
ON CHITIETTHUOC
FOR INSERT
AS
BEGIN
    IF(NOT EXISTS(SELECT *
    FROM LOAITHUOC LT JOIN inserted I
        ON LT.MATHUOC = I.MATHUOC))
    BEGIN
        RAISERROR(N'Thuốc này không tồn tại trong kho',16,1)
        ROLLBACK TRAN
        RETURN
    END

    IF(EXISTS(SELECT *
    FROM HOSOBENH HSB JOIN inserted I
        ON HSB.SODT = I.SODT AND HSB.SOTT = I.SOTT
    WHERE _DAXUATHOADON = 1))
    BEGIN
        RAISERROR(N'Lỗi đã xuất hóa đơn, không thể thêm đơn thuốc được',16,1)
        ROLLBACK TRAN
        RETURN
    END

    IF(EXISTS(SELECT *
    FROM LOAITHUOC LT, inserted I
    WHERE I.MATHUOC = LT.MATHUOC AND I.SOLUONG > LT.SLTON AND LT.NGAYHETHAN >= GETDATE()))
    BEGIN
        RAISERROR(N'Lỗi không đủ số lượng thuốc tồn kho để bán',16,1)
        ROLLBACK TRAN
        RETURN
    END
END
GO

-- 2. Trigger bán thuốc, khi sửa số lượng thuốc trong chi tiết thuốc
-- Tạo trigger nếu chưa tồn tại hoặc cập nhật nếu trigger đã tồn tại
IF EXISTS (SELECT *
FROM sys.triggers
WHERE name = 'Trigger_Update_CTT_SL')
    DROP TRIGGER Trigger_Update_CTT_SL
GO

CREATE TRIGGER Trigger_Update_CTT_SL
ON CHITIETTHUOC
FOR UPDATE
AS
if UPDATE(SOLUONG)
BEGIN
    IF(EXISTS(SELECT *
    FROM HOSOBENH HSB JOIN inserted I
        ON HSB.SODT = I.SODT AND HSB.SOTT = I.SOTT
    WHERE _DAXUATHOADON = 1))
    BEGIN
        RAISERROR(N'Lỗi đã xuất hóa đơn, không thể sửa được',16,1)
        ROLLBACK TRAN
        RETURN
    END

    IF(EXISTS(SELECT *
    FROM LOAITHUOC LT, inserted I, deleted D
    WHERE I.MATHUOC = LT.MATHUOC AND D.MATHUOC = LT.MATHUOC AND I.SOLUONG > LT.SLTON + D.SOLUONG))
    BEGIN
        RAISERROR(N'Lỗi không đủ số lượng thuốc tồn kho để bán',16,1)
        ROLLBACK TRAN
        RETURN
    END
    
    ELSE 
    BEGIN
        UPDATE LOAITHUOC
        SET SLTON = SLTON + (
            SELECT SOLUONG
        FROM deleted
        WHERE MATHUOC = LOAITHUOC.MATHUOC
        )
        FROM LOAITHUOC
            JOIN deleted ON LOAITHUOC.MATHUOC = deleted.MATHUOC

        UPDATE LOAITHUOC
        SET SLTON = SLTON - (
            SELECT SOLUONG
        FROM inserted
        WHERE MATHUOC = LOAITHUOC.MATHUOC
        )
        FROM LOAITHUOC
            JOIN inserted ON LOAITHUOC.MATHUOC = inserted.MATHUOC
    END
END
GO

-- 3. Trigger không được thêm, hay sửa chi tiết dịch vụ khi đã xuất hóa đơn
-- Tạo trigger nếu chưa tồn tại hoặc cập nhật nếu trigger đã tồn tại
IF EXISTS (SELECT *
FROM sys.triggers
WHERE name = 'Trigger_Insert_Update_CTDV')
    DROP TRIGGER Trigger_Insert_Update_CTDV
GO

CREATE TRIGGER Trigger_Insert_Update_CTDV
ON  CHITIETDV
FOR UPDATE, INSERT
AS
BEGIN
    IF(EXISTS(SELECT *
    FROM HOSOBENH HSB JOIN inserted I
        ON HSB.SODT = I.SODT AND HSB.SOTT = I.SOTT
    WHERE _DAXUATHOADON = 1))
    BEGIN
        RAISERROR(N'Lỗi đã xuất hóa đơn, không thể sửa được',16,1)
        ROLLBACK TRAN
        RETURN
    END
END
GO

-----------------------------------------

--LICHHEN
--1 Mỗi lịch hẹn luôn đi kèm với duy nhất một lịch rảnh của nha sĩ.
--2 Các lịch hẹn của một khách hàng không được trùng ca nhau.
IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'Trigger_Insert_LichHen')
    DROP TRIGGER Trigger_Insert_LichHen
GO

CREATE TRIGGER Trigger_Insert_LichHen
ON LICHHEN
INSTEAD OF INSERT
AS
BEGIN

	IF (not exists (SELECT * FROM LICHRANH LR JOIN inserted i 
				ON (LR.MANS = i.MANS AND LR.SOTT = i.SOTT)))
	BEGIN
		RAISERROR(N'Lỗi: Lịch hẹn không khớp với lịch rảnh của nha sĩ.',16,1)
		ROLLBACK TRAN
		RETURN
	END

	IF (exists (SELECT * FROM LICHHEN LH JOIN inserted i
				ON (LH.MANS = i.MANS AND LH.SOTT = i.SOTT)))
	BEGIN
		SELECT * FROM LICHHEN LH 
		RAISERROR(N'Lỗi: Lịch hẹn đã có người đặt.',16,1)
		ROLLBACK TRAN
		RETURN
	END
	
	IF (exists (SELECT * FROM 
			(
				SELECT SODT AS SODT1, NGAY AS NGAY1, MACA AS MACA1
				FROM LICHRANH LR1 JOIN inserted i ON (LR1.MANS = i.MANS AND LR1.SOTT = i.SOTT)
			)   AS T1 INNER JOIN
			(
				SELECT SODT AS SODT2, NGAY AS NGAY2, MACA AS MACA2
				FROM LICHRANH LR2 JOIN LICHHEN LH ON (LR2.MANS = LH.MANS AND LR2.SOTT = LH.SOTT)
			)   AS T2
			ON (SODT1 = SODT2 AND NGAY1 = NGAY2 AND MACA1 = MACA2)))
	BEGIN
		RAISERROR(N'Lỗi: Các lịch hẹn của cùng một khách hàng không được trùng ca nhau.',16,1)
		ROLLBACK TRAN
		RETURN
	END

	ELSE
    BEGIN
        INSERT INTO LICHHEN (MANS, SOTT, LYDOKHAM, SODT)
        SELECT MANS, SOTT, LYDOKHAM, SODT
        FROM inserted;
    END
END
GO

--HOADON
--1 Mỗi hóa đơn cần đi theo một hồ sơ bệnh.
--2 Tổng chi phí của hóa đơn = (SoLuong*DonGia(của Dịch vụ) + SoLuong*DonGia(của Thuốc))
--3 Mỗi hóa đơn phải được phụ trách bởi một nhân viên hợp lệ

IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'Trigger_Insert_HoaDon')
    DROP TRIGGER Trigger_Insert_HoaDon
GO

CREATE TRIGGER Trigger_Insert_HoaDon
ON HOADON
INSTEAD OF insert
AS
BEGIN
	IF (not exists (SELECT * FROM HOSOBENH HSB JOIN inserted i 
				ON (HSB.SODT = i.SODT AND HSB.SOTT = i.SOTT)))
	BEGIN
		RAISERROR(N'Lỗi: Không tồn tại hồ sơ bệnh tương ứng.',16,1)
		ROLLBACK TRAN
		RETURN
	END

	IF (not exists (SELECT * FROM NHANVIEN NV JOIN inserted i 
				ON (NV.MANV = i.MANV)))
	BEGIN
		RAISERROR(N'Lỗi: Mã nhân viên phụ trách không hợp lệ.',16,1)
		ROLLBACK TRAN
		RETURN
	END

    DECLARE @NgayXuatHD DATE, @NgayKham DATE;
    SELECT @NgayXuatHD = i.NGAYXUAT
    FROM inserted i;
    SELECT @NgayKham = H.NGAYKHAM
    FROM HOSOBENH H JOIN inserted i ON H.SODT = i.SODT AND H.SOTT = i.SOTT;

    IF @NgayXuatHD < @NgayKham
	BEGIN
		RAISERROR(N'Lỗi: Ngày xuất hóa đơn không hợp lệ.',16,1)
		ROLLBACK TRAN
		RETURN
	END

	ELSE
    BEGIN
        INSERT INTO HOADON (SODT, SOTT, NGAYXUAT, MANV)
        SELECT SODT, SOTT, NGAYXUAT, MANV
        FROM inserted;
    END
END
GO

-----------------------------------------

-- TRIGGER LOAI THUOC
-- 1. Trigger cập nhật số lượng tồn khi thêm sửa/xóa loại thuốc:
CREATE TRIGGER Trigger_Insert_Update_Delete_LT on LOAITHUOC for INSERT, UPDATE, DELETE
AS
BEGIN
    -- R3: Số lượng thuốc tồn kho mỗi loại thuốc phải từ 0 trở lên. 
    IF EXISTS (SELECT * FROM LOAITHUOC LT JOIN inserted I ON LT.MATHUOC = I.MATHUOC WHERE LT.SLTON < 0)
    BEGIN
        RAISERROR(N'Số lượng tồn không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
    -- R5: Số lượng thuốc nhập của mỗi loại thuốc phải lớn hơn 0. 
    IF EXISTS (SELECT * FROM LOAITHUOC LT JOIN inserted I ON LT.MATHUOC = I.MATHUOC WHERE LT.SLNHAP < 0)
    BEGIN
        RAISERROR(N'Số lượng nhập không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
    -- R6: Số lượng đã hủy của mỗi loại thuốc phải từ 0 trở lên. 
    IF EXISTS (SELECT * FROM LOAITHUOC LT JOIN inserted I ON LT.MATHUOC = I.MATHUOC WHERE LT.SLDAHUY < 0)
    BEGIN
        RAISERROR(N'Số lượng đã hủy không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END

    -- R4: Đơn giá mỗi loại thuốc phải từ 0 trở lên.
    IF EXISTS (SELECT * FROM LOAITHUOC LT JOIN inserted I ON LT.MATHUOC = I.MATHUOC WHERE LT.DONGIA < 0)
    BEGIN
        RAISERROR(N'Đơn giá không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
    
END
GO

----
CREATE TRIGGER Trigger_Insert_Update_LT_Hethan 
ON LOAITHUOC
INSTEAD OF INSERT
AS
BEGIN

  -- R8: Ngày hết hạn của mỗi loại thuốc phải xa hơn ngày hiện tại.
  IF EXISTS (
    SELECT * 
    FROM LOAITHUOC LT JOIN inserted  I ON LT.MATHUOC = I.MATHUOC 
    WHERE LT.NGAYHETHAN < GETDATE()
  )
  BEGIN
     RAISERROR(N'Ngày hết hạn không được nhỏ hơn ngày hiện tại', 16, 1)
     ROLLBACK TRAN
     RETURN
  END

  -- Cho phép insert 
  INSERT INTO LOAITHUOC (MATHUOC, TENTHUOC, DONVITINH, CHIDINH, 
                          SLTON, SLNHAP, SLDAHUY, NGAYHETHAN, DONGIA)
  SELECT MATHUOC, TENTHUOC, DONVITINH, CHIDINH,
         SLTON, SLNHAP, SLDAHUY, NGAYHETHAN, DONGIA
  FROM inserted

END

GO

--TRIGGER LOAI DICH VU
--1.Trigger gia dich vu lon hon 0:
CREATE TRIGGER Trigger_Insert_Update_LDV on LOAIDICHVU for INSERT, UPDATE
AS
BEGIN
    -- don gia thuoc phau thuat phai lon hon 0
    IF EXISTS (SELECT * FROM LOAIDICHVU LDV JOIN inserted I ON LDV.MADV = I.MADV WHERE LDV.DONGIA < 0)
    BEGIN
        RAISERROR(N'Giá dịch vụ không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
    -- R14: Mã dịch vụ trong loại dịch vụ phải là độc quyền. 
    IF EXISTS (SELECT * FROM LOAIDICHVU LDV JOIN inserted I ON LDV.MADV = I.MADV WHERE LDV.MADV IN (SELECT MADV FROM LOAIDICHVU GROUP BY MADV HAVING COUNT(*) > 1))
    BEGIN
        RAISERROR(N'Mã dịch vụ phải là độc quyền', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
    -- R15: Với mọi chi tiết dịch vụ, tồn tại mã dịch vụ ứng vọi loại dịch vụ đó.
    IF EXISTS (SELECT * FROM LOAIDICHVU LDV JOIN inserted I ON LDV.MADV = I.MADV WHERE LDV.DONGIA < 0)
    BEGIN
        RAISERROR(N'Giá dịch vụ không được nhỏ hơn 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END
END
GO
