USE [PKNHAKHOA]
GO

-- Dirty read khi cap nhat thong tin thuoc

/****** Object:  StoredProcedure [dbo].[SP_CAPNHATLOAITHUOC_QTV]    Script Date: 12/30/2023 1:31:40 PM ******/
CREATE PROCEDURE SP_CAPNHATLOAITHUOC_QTV
    @MATHUOC VARCHAR(10),
    @TENTHUOC NVARCHAR(50) = NULL,
    @CHIDINH NVARCHAR(500) = NULL,
    @DONGIA FLOAT = NULL
AS
BEGIN TRAN
BEGIN TRY 
BEGIN
    IF  @DONGIA <= 0
    BEGIN
        RAISERROR(N'Đơn giá không được nhỏ hơn hoặc bằng 0', 16, 1)
        ROLLBACK TRAN
        RETURN
    END

    IF @TENTHUOC IS NOT NULL OR @CHIDINH IS NOT NULL OR @DONGIA IS NOT NULL
    BEGIN

        UPDATE LOAITHUOC
        SET 
            TENTHUOC = ISNULL(@TENTHUOC,TENTHUOC),
            CHIDINH = ISNULL(@CHIDINH, CHIDINH),
            DONGIA = ISNULL(@DONGIA, DONGIA)
        WHERE MATHUOC = @MATHUOC;

        SET TRANSACTION ISOLATION LEVEL READ COMMITTED; -- Reset isolation level to default READ COMMITTED
    END
    ELSE
    BEGIN
        RAISERROR(N'Không có thông tin mới để cập nhật.',16,1);
    END
END;
END TRY 
BEGIN CATCH 
        ROLLBACK TRAN;
		DECLARE @errorMessage NVARCHAR(200) = ERROR_MESSAGE();
		THROW 51000, @errorMessage, 1
		RETURN
END CATCH
COMMIT TRAN
GO



-- Lost update    khi quan tri vien doi mat khau SP_DOIMK_QTV
/****** Object:  StoredProcedure [dbo].[SP_DOIMK_QTV]    Script Date: 12/30/2023 1:31:40 PM ******/
GO
CREATE PROC SP_DOIMK_QTV
	@MAQTV VARCHAR(100),
	@MATKHAUCU VARCHAR(100),
	@MATKHAUMOI VARCHAR(100)
AS
BEGIN TRAN
	BEGIN TRY
		SET TRANSACTION ISOLATION LEVEL REPEATABLE READ -- Set isolation level to REPEATABLE READ

		-- Kiểm tra tồn tại tài khoản
		IF (NOT EXISTS(SELECT * FROM QTV WHERE MAQTV = @MAQTV))
		BEGIN
			RAISERROR(N'Không tồn tại quản trị viên này', 16, 1);
			ROLLBACK TRAN
			RETURN
		END

		IF NOT EXISTS(SELECT 1 FROM QTV WHERE MAQTV = @MAQTV AND MATKHAU = @MATKHAUCU)
		BEGIN 
			RAISERROR(N'Xác nhận mật khẩu sai', 16, 1);
			ROLLBACK TRAN
			RETURN
		END
		ELSE
		BEGIN
			UPDATE QTV
			SET	MATKHAU = @MATKHAUMOI
			WHERE MAQTV = @MAQTV
		END
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN;
		DECLARE @errorMessage NVARCHAR(200) = ERROR_MESSAGE();
		THROW 51000, @errorMessage, 1;
		RETURN
	END CATCH
COMMIT TRAN
GO



-- Lost update     khi quan tri vien doi mat khau SP_DOIMK_NV
/****** Object:  StoredProcedure [dbo].[SP_DOIMK_NV]    Script Date: 12/30/2023 1:31:40 PM ******/

GO
CREATE PROC SP_DOIMK_NV
	@MANV VARCHAR(100),
	@MATKHAUCU VARCHAR(100),
	@MATKHAUMOI VARCHAR(100)
AS
BEGIN TRAN
	BEGIN TRY
		-- Kiểm tra tồn tại tài khoản
		IF (NOT EXISTS(SELECT * FROM NHANVIEN WHERE MANV = @MANV))
		BEGIN
			RAISERROR(N'Không tồn tại nhân viên này', 16, 1);
			ROLLBACK TRAN
			RETURN
		END

		IF NOT EXISTS(SELECT 1 FROM NHANVIEN WHERE MANV = @MANV AND MATKHAU = @MATKHAUCU)
		BEGIN 
			RAISERROR(N'Xác nhận mật khẩu sai', 16, 1);
			ROLLBACK TRAN
			RETURN
		END
		ELSE
		BEGIN
			UPDATE NHANVIEN
			SET	MATKHAU = @MATKHAUMOI
			WHERE MANV = @MANV
		END
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN;
		DECLARE @errorMessage NVARCHAR(200) = ERROR_MESSAGE();
		THROW 51000, @errorMessage, 1;
		RETURN
	END CATCH
COMMIT TRAN

-- Unrepeatable read khi dang nhap nha si
/****** Object:  StoredProcedure [dbo].[SP_DANGNHAP_ALL]    Script Date: 12/30/2023 1:31:40 PM ******/
GO
CREATE PROC SP_DANGNHAP_ALL
	@MATK VARCHAR(100),
	@MATKHAU VARCHAR(20)
AS
BEGIN TRAN
	BEGIN TRY
		IF LEN(@MATK) > 10
		BEGIN
			RAISERROR(N'Tài khoản đăng nhập không hợp lệ.', 16, 1);
			ROLLBACK TRAN
			RETURN
		END 

		DECLARE @ROLE VARCHAR(10);
		DECLARE @_ISLOCK BIT;
		SET @ROLE = NULL;
		SET @_ISLOCK = NULL;

		--Kiểm tra tài khoản đăng nhập có hợp lệ (tk mà mk đều đúng)
		IF EXISTS (SELECT * FROM KHACHHANG WITH (UPDLOCK, ROWLOCK) WHERE SODT = @MATK AND MATKHAU = @MATKHAU)
		BEGIN
			
			SELECT @ROLE = 'KH', @_ISLOCK = _DAKHOA
			FROM KHACHHANG 
			WHERE SODT = @MATK AND MATKHAU = @MATKHAU;
		END
		ELSE IF EXISTS (SELECT * FROM NHASI WITH (UPDLOCK, ROWLOCK) WHERE MANS = @MATK AND MATKHAU = @MATKHAU)
		BEGIN
			SELECT @ROLE = 'NS', @_ISLOCK = _DAKHOA
			FROM NHASI 
			WHERE MANS = @MATK AND MATKHAU = @MATKHAU;
		END
		ELSE IF EXISTS (SELECT * FROM NHANVIEN WITH (UPDLOCK, ROWLOCK) WHERE MANV = @MATK AND MATKHAU = @MATKHAU)
		BEGIN
			SELECT @ROLE = 'NV', @_ISLOCK = _DAKHOA
			FROM NHANVIEN 
			WHERE MANV = @MATK AND MATKHAU = @MATKHAU;
		END
		ELSE IF EXISTS (SELECT * FROM QTV WITH (UPDLOCK, ROWLOCK) WHERE MAQTV = @MATK AND MATKHAU = @MATKHAU)
		BEGIN
			SET @ROLE = 'QTV';
			SET @_ISLOCK = 0;
		END
		ELSE
		BEGIN
			RAISERROR(N'Tài khoản hoặc mật khẩu không đúng.', 16, 1);
			ROLLBACK TRAN
			RETURN
		END

		IF (@_ISLOCK = 1)
		BEGIN
			RAISERROR(N'Tài khoản đã bị khóa.', 16, 1);
			ROLLBACK TRAN
			RETURN
		END
		
		IF @ROLE = 'KH'
		BEGIN
			SELECT 'KH' AS ROLE, SODT, HOTEN, PHAI, NGAYSINH, DIACHI
			FROM KHACHHANG
			WHERE SODT = @MATK;
		END
		ELSE IF @ROLE = 'NS'
		BEGIN
			SELECT 'NS' AS ROLE, MANS, HOTEN, PHAI, GIOITHIEU
			FROM NHASI
			WHERE MANS = @MATK;
		END
		ELSE IF @ROLE = 'NV'
		BEGIN
			SELECT 'NV' AS ROLE, MANV, HOTEN, PHAI, VITRICV
			FROM NHANVIEN
			WHERE MANV = @MATK;
		END
		ELSE IF @ROLE = 'QTV'
		BEGIN
			SELECT 'QTV' AS ROLE, MAQTV, HOTEN, PHAI
			FROM QTV
			WHERE MAQTV = @MATK;
		END

	END TRY
	BEGIN CATCH
		ROLLBACK TRAN;
		DECLARE @errorMessage NVARCHAR(200) = ERROR_MESSAGE();
		THROW 51000, @errorMessage, 1;
		RETURN
	END CATCH
COMMIT TRAN



-- Phantom read       khi  nhan vien tao hoa don
/****** Object:  StoredProcedure [dbo].[SP_TAOHOADON_NV]    Script Date: 12/30/2023 1:31:40 PM ******/
GO
CREATE PROC SP_TAOHOADON_NV
	@SODT VARCHAR(100),
	@SOTT INT,
	@MANV VARCHAR(100)
AS
BEGIN TRAN
	BEGIN TRY
		IF EXISTS(SELECT 1 FROM HOSOBENH WITH (UPDLOCK, ROWLOCK) WHERE SODT = @SODT AND SOTT = @SODT)
		BEGIN
			RAISERROR(N'Hồ sơ bệnh không tồn tại', 16, 1);
			ROLLBACK TRAN
			RETURN
		END

		IF EXISTS(SELECT 1 FROM HOSOBENH WITH (UPDLOCK, ROWLOCK) WHERE SODT = @SODT AND SOTT = @SODT AND _DAXUATHOADON = 1)
		BEGIN
			RAISERROR(N'Hồ sơ bệnh đã được xuất hóa đơn', 16, 1);
			ROLLBACK TRAN
			RETURN
		END

		IF NOT EXISTS(SELECT 1 FROM CHITIETDV WITH (UPDLOCK, ROWLOCK) WHERE SODT = @SODT AND SOTT = @SOTT)
		BEGIN
			RAISERROR(N'Hồ sơ bệnh chưa được thêm dịch vụ vào', 16, 1);
			ROLLBACK TRAN
			RETURN
		END
		ELSE

		BEGIN
			DECLARE @TONGCHIPHI FLOAT;
			DECLARE @TIENDV FLOAT
			DECLARE @TIENTHUOC FLOAT;

			SELECT @TIENTHUOC = ISNULL(SUM(DONGIALUCTHEM * SOLUONG), 0)
			FROM CHITIETTHUOC CTT WITH (UPDLOCK, ROWLOCK)
			WHERE CTT.SODT = @SODT AND CTT.SOTT = @SOTT;

			SELECT @TIENDV = ISNULL(SUM(DONGIALUCTHEM * SOLUONG), 0)
			FROM CHITIETDV CTDV WITH (UPDLOCK, ROWLOCK)
			WHERE CTDV.SODT = @SODT AND CTDV.SOTT = @SOTT;
			
			SET @TONGCHIPHI = @TIENTHUOC + @TIENDV

			INSERT INTO HOADON(SODT, SOTT, NGAYXUAT, TONGCHIPHI, _DATHANHTOAN, MANV)
			VALUES(@SODT, @SOTT, GETDATE(), @TONGCHIPHI, 0, @MANV)

			UPDATE HOSOBENH 
			SET _DAXUATHOADON = 1
			WHERE SOTT = @SOTT AND SODT = @SODT

			SELECT KH.HOTEN HOTENKH, HD.SODT SODT, HD.SOTT SOTTHD, NGAYXUAT, TONGCHIPHI, NV.MANV MANV, NV.HOTEN HOTENNV, _DATHANHTOAN DATHANHTOAN, CTDV.MADV, TENDV, CTDV.SOLUONG SLDV, CTDV.DONGIALUCTHEM DONGIADV, CTT.MATHUOC, TENTHUOC, CTT.SOLUONG SLTHUOC, DONVITINH, CTT.DONGIALUCTHEM DONGIATHUOC
			FROM HOADON HD
			JOIN KHACHHANG KH ON HD.SODT = KH.SODT
			JOIN NHANVIEN NV ON NV.MANV = HD.MANV
			JOIN CHITIETDV CTDV ON CTDV.SODT = HD.SODT AND CTDV.SOTT = HD.SOTT
			JOIN LOAIDICHVU LDV ON LDV.MADV = CTDV.MADV
			LEFT JOIN CHITIETTHUOC CTT ON CTT.SODT = HD.SODT AND CTT.SOTT = HD.SOTT
			LEFT JOIN LOAITHUOC	LT ON LT.MATHUOC = CTT.MATHUOC
			WHERE HD.SOTT = @SOTT AND HD.SODT = @SODT
		END
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN;
		DECLARE @errorMessage NVARCHAR(200) = ERROR_MESSAGE();
		THROW 51000, @errorMessage, 1;
		RETURN
	END CATCH
COMMIT TRAN






